#include "Level.h"
#include "input/touch_input_manager.h"



Level::Level() :
	world_(NULL)
{
}

Level::~Level()
{
}


void Level::SetupLights()
{
	// grab the data for the default shader used for rendering 3D geometry
	gef::Default3DShaderData& default_shader_data = renderer_3d->default_shader_data();

	// set the ambient light
	default_shader_data.set_ambient_light_colour(gef::Colour(0.25f, 0.25f, 0.25f, 1.0f));

	// add a point light that is almost white, but with a blue tinge
	// the position of the light is set far away so it acts light a directional light
	gef::PointLight default_point_light;
	default_point_light.set_colour(gef::Colour(0.7f, 0.7f, 1.0f, 1.0f));
	default_point_light.set_position(gef::Vector4(-500.0f, 400.0f, 700.0f));
	default_shader_data.AddPointLight(default_point_light);
}

void Level::Init(gef::SpriteRenderer* spr, gef::Font* fon, gef::InputManager* inp, gef::Renderer3D* ren, PrimitiveBuilder* primi, gef::Platform &plat)
{
	sprite_renderer = spr;
	input_manager = inp;
	renderer_3d = ren;
	primitive_builder = primi;
	font = fon;
	SetupLights();

	primitive_builder = new PrimitiveBuilder(plat);

	
	// initialise the physics world
	b2Vec2 gravity(0.0f, -19.6f);
	world_ = new b2World(gravity);
	
	//player initialization
	Player.InitPlayer(primitive_builder, world_);

	//ground initialization
	ground_normal[0].ground_pos = {-10, -7 };
	ground_normal[1].ground_pos = { 10, 3 };

	srand(time(NULL));
	random = rand() % 7 + 2;
	random_pos = { random, random};

	for (int i = 0; i < 3; i++)
	{
		ground_bounce[i].ground_pos = { random_pos };
		ground_bounce[i].InitGround(primitive_builder, world_);
	}

	for (int i = 0; i< 2; i++)
	ground_normal[i].InitGround(primitive_builder, world_);
	

	//enemy initialization
	enemy.init(primitive_builder, world_);
}
void Level::update(float ft, gef::Platform &plat)
{
	fps_ = 1.0f / ft;
	// update physics world
	float32 timeStep = 1.0f / 60.0f;
	
	int32 velocityIterations = 6;
	int32 positionIterations = 2;

	world_->Step(timeStep, velocityIterations, positionIterations);

	// update object visuals from simulation data
	Player.UpdateFromSimulation(Player.player_body_);
	enemy.UpdateFromSimulation(enemy.enemy_body_);

	for (int i = 0; i < 2; i++)
		ground_normal[i].UpdateFromSimulation(ground_normal[i].ground_body_);
	for (int i = 0; i < 3; i++)
		ground_bounce[i].UpdateFromSimulation(ground_normal[i].ground_body_);

	

	if (input_manager)
	{
		input_manager->Update();


		gef::SonyControllerInputManager* controller_input = input_manager->controller_input();

		if (controller_input)
		{
			const gef::SonyController* controller = input_manager->controller_input()->GetController(0);
			Player.update(controller);

		}
	}

	const gef::SonyController* controller = input_manager->controller_input()->GetController(0);
	const gef::TouchInputManager * touch_manager = input_manager->touch_manager();

	// get the active touches for this panel
	const gef::TouchContainer& panel_touches = touch_manager->touches(0);


	if (panel_touches.size() > 0)
	{
		// just grabbing the first touch for simplicity here
		// normally we go through all active touches and check the id
		gef::Touch touch = panel_touches.front();

		// only process this touch if it is NEW or ACTIVE
		if ((touch.type == gef::TT_NEW) || (touch.type == gef::TT_ACTIVE))
		{
			// convert the touch position to a ray that starts on the camera near plane
			// and shoots into the camera view frustum
			gef::Vector2 screen_position = touch.position;
			gef::Vector4 ray_start_position, ray_direction;
			GetScreenPosRay(screen_position, renderer_3d->projection_matrix(), renderer_3d->view_matrix(), ray_start_position, ray_direction, plat);

			if (Player.player_body_)
			{
				// Create a sphere around the position of the player body
				// the radius can be changed for larger objects
				// radius= 0.5f is a sensible value for a 1x1x1 cube
				gef::Vector4 sphere_centre(Player.player_body_->GetPosition().x, Player.player_body_->GetPosition().y, 0.0f);
				float  sphere_radius = 0.5f;

				// check to see if the ray intersects with the bound sphere that is around the player
				if (RaySphereIntersect(ray_start_position, ray_direction, sphere_centre, sphere_radius))
				{
					gef::DebugOut(" %f\n", Player.player_body_->GetPosition().y/*, player_body_->GetPosition().y)*/);
					//player_body_->SetTransform({ touch.position.x, touch.position.y }, 0);
				}
			}
		}
	}

	UpdateSimulation(ft);
}

void Level::Release()
{
	// destroying the physics world also destroys all the objects within it
	delete world_;
	world_ = NULL;

	Player.Release();
	
	for (int i = 0; i< 2; i++)
	ground_normal[i].Release();
	//ground_bounce.Release();

	//Releases();
}

void Level::DrawHUD()
{
	if (font)
	{
		// display frame rate
		font->RenderText(sprite_renderer, gef::Vector4(850.0f, 510.0f, -0.9f), 1.0f, 0xffffffff, gef::TJ_LEFT, "FPS: %.1f", fps_);
	}
}

void Level::Render(gef::Platform &plat)
{
	// setup camera
	// projection
	float fov = gef::DegToRad(45.0f);
	float aspect_ratio = (float)plat.width() / (float)plat.height();
	gef::Matrix44 projection_matrix;
	projection_matrix = plat.PerspectiveProjectionFov(fov, aspect_ratio, 0.1f, 100.0f);
	renderer_3d->set_projection_matrix(projection_matrix);

	// view
	gef::Vector4 camera_eye(0.0f, 0.0f, 20.0f);
	gef::Vector4 camera_lookat(0.0f, 0.0f, 0.0f);
	gef::Vector4 camera_up(0.0f, 1.0f, 0.0f);
	gef::Matrix44 view_matrix;
	view_matrix.LookAt(camera_eye, camera_lookat, camera_up);
	renderer_3d->set_view_matrix(view_matrix);


	// draw 3d geometry
	renderer_3d->Begin();

	// draw ground
	for (int i = 0; i < 2; i++)
		renderer_3d->DrawMesh(ground_normal[i]);
	for (int i = 0; i < 3; i++)
		renderer_3d->DrawMesh(ground_bounce[i]);

	//draw enemy
	renderer_3d->set_override_material(&primitive_builder->green_material());
	renderer_3d->DrawMesh(enemy);
	renderer_3d->set_override_material(NULL);

	// draw player
	renderer_3d->set_override_material(&primitive_builder->red_material());
	renderer_3d->DrawMesh(Player);
	renderer_3d->set_override_material(NULL);

	renderer_3d->End();

	// start drawing sprites, but don't clear the frame buffer
	sprite_renderer->Begin(false);
	DrawHUD();
	sprite_renderer->End();
}

void Level::UpdateSimulation(float dt)
{
	//collision detection
	//get the head of the contact list
	b2Contact* contact = world_->GetContactList();
	//get contact count
	int contact_count = world_->GetContactCount();

	for (int contact_num = 0; contact_num<contact_count; ++contact_num)
	{
		if (contact->IsTouching())
		{
			// get the colliding bodies
			b2Body* bodyA = contact->GetFixtureA()->GetBody();
			b2Body* bodyB = contact->GetFixtureB()->GetBody();

			// DO COLLISION RESPONSE HERE
			GameObject* gameObjectA = NULL;
			GameObject* gameObjectB = NULL;

			gameObjectA = (GameObject*)bodyA->GetUserData();
			gameObjectB = (GameObject*)bodyB->GetUserData();

			player* playr = NULL;
			Ground* bouncy = NULL;
			Enemy* badguy = NULL;

			if (gameObjectA)
			{
				if (gameObjectA->type() == PLAYER)
				{
					playr = (player*)gameObjectA;
				}
			}

			if (gameObjectB)
			{
				if (gameObjectB->type() == BOUNCE)
				{
					bouncy = (Ground*)gameObjectB;
				}
				if (gameObjectB->type() == ENEMY)
				{
					badguy = (Enemy*)gameObjectB;
				}
			}

			if (playr)
			{
				playr->Collision_Response(badguy);
			}
		}
		// Get next contact point
		contact = contact->GetNext();
	}
}
void Level::GetScreenPosRay(const gef::Vector2& screen_position, const gef::Matrix44& projection, const gef::Matrix44& view, gef::Vector4& startPoint, gef::Vector4& direction, gef::Platform& plat)
{
	gef::Vector2 ndc;

	float hw = plat.width() * 0.5f;
	float hh = plat.height() * 0.5f;

	ndc.x = (static_cast<float>(screen_position.x) - hw) / hw;
	ndc.y = (hh - static_cast<float>(screen_position.y)) / hh;

	gef::Matrix44 projectionInverse;
	projectionInverse.Inverse(view * projection);

	gef::Vector4 nearPoint, farPoint;

	nearPoint = gef::Vector4(ndc.x, ndc.y, ndc_z_min_, 1.0f).TransformW(projectionInverse);
	farPoint = gef::Vector4(ndc.x, ndc.y, 1.0f, 1.0f).TransformW(projectionInverse);

	nearPoint /= nearPoint.w();
	farPoint /= farPoint.w();

	startPoint = gef::Vector4(nearPoint.x(), nearPoint.y(), nearPoint.z());
	direction = farPoint - nearPoint;
	direction.Normalise();
}

// modified from https://gamedev.stackexchange.com/questions/96459/fast-ray-sphere-collision-code
bool Level::RaySphereIntersect(gef::Vector4& startPoint, gef::Vector4& direction, gef::Vector4& sphere_centre, float sphere_radius)
{
	gef::Vector4 m = startPoint - sphere_centre;
	float b = m.DotProduct(direction);
	float c = m.LengthSqr() - sphere_radius * sphere_radius;

	// Exit if ray’s origin outside sphere (c > 0) and ray pointing away from sphere (b > 0) 
	if (c > 0.0f && b > 0.0f)
		return false;
	float discr = b * b - c;

	// A negative discriminant corresponds to ray missing sphere 
	if (discr < 0.0f)
		return false;

	// Ray now found to intersect sphere, compute smallest t value of intersection
	float t = -b - sqrtf(discr);

	// If t is negative, ray started inside sphere so clamp t to zero 
	if (t < 0.0f)
		t = 0.0f;

	gef::Vector4 hitpoint = startPoint + direction * t;

	return true;
}
